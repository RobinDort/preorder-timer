<?php

use RobinDort\PreorderTimer\Widget\Frontend\Helper\HolidayCalculation;

$holidayCalculator = new HolidayCalculation();
$isHoliday = $holidayCalculator->isHolidayToday();
?>

<?php $this->extend('form_row'); ?>

<?php $this->block('label'); ?>
<?= $this->generateLabel() ?>
<?php $this->endblock(); ?>

<?php $this->block('field'); ?>
<?php if ($this->hasErrors()): ?>
<p id="preorder-error" class="error"><?= $this->getErrorAsString(); ?></p>
<?php endif; ?>


<div id="preorder-container">
<input 
type="text" 
name="date-input" 
id="preorder-formular-date" 
class="text <?php if ($this->class): ?> <?= $this->class ?><?php endif; ?>"
value="<?= htmlspecialchars($this->value['date'] ?? '') ?>"
>

<input
type="text"
name="time-input"
id="preorder-formular-time"
class="text"
value="<?= htmlspecialchars($this->value['time'] ?? '') ?>"
readonly
>
</div>

<script>
document.addEventListener('DOMContentLoaded', async function() {
    const dateInput = document.getElementById("preorder-formular-date");
    const timePicker = document.getElementById("preorder-formular-time");
    const date = new Date();
    const specialClosedDays = <?php echo json_encode($this->specialClosedDays); ?>;

    const morningRange = { start: "12:30", end: "14:15" };

    const eveningWeekendHolidayRange = { start: "17:30", end: "21:45" };
    const eveningRange = {start: "17:30", end: "21:15"};
    
    let isHoliday = false;
    let dayOfWeek = -1;
    let allowedRange = [];
    let validationTimeout;

    const submitNextBtn = document.querySelector("input.submit.next.button");
    // disable next button until a valid time has been placed.
    if (submitNextBtn) {
        submitNextBtn.disabled = true;
    }

    // First check if there is already a value inside the dateInput and if so empty it.
    if (dateInput.value !== null && dateInput.value !== "") {

        dateInput.value = "";
    }

    // Also check for the time picker value
    if (timePicker.value !== null && timePicker.value !== "") {

        timePicker.value = "";
    }
    

    flatpickr(dateInput, {
        dateFormat: "d.m.Y",
        locale: "de",
        minDate: "today",
        maxDate: new Date().fp_incr(14),
        onClose: async function(selectedDates, dateStr, instance) {
            const {range, weekday} = await setAllowedRange(dateStr);
            dayOfWeek = weekday;
            allowedRange = range;
        },
        disable: [
            function(date) {
                // Disable all Mondays
                return date.getDay() === 1;
            },
            function(date) {
                // Disable 25th December and 26th December for any year
                const day = date.getDate();
                const month = date.getMonth() + 1; // getMonth() is zero-based
                return (day === 25 && month === 12) || (day === 26 && month === 12);
            },
            function(date) {
                const convertedSpecialDays = specialClosedDays['fullyClosed'].map(date => {
                    const [day, month, year] = date.split('.');
                    const castedDay = parseInt(day);

                    // ATTENTION: Due to some mismatch between the two date strings while comparing, the day of this needs to be substracted by 1
                    // For example: If 2024-11-13 should be disabled the function needs to return 2024-11-12.
                    return `${year}-${month}-${castedDay-1}`;
                });
                const dateString = date.toISOString().split('T')[0]; // Convert to 'Y-m-d' format
        
                return convertedSpecialDays.includes(dateString);
            }
        ],
        "locale": {
            "firstDayOfWeek": 1 // start week on Monday
        }
    });

    flatpickr(timePicker, {
        enableTime: true,
        noCalendar: true,
        locale: "de",
        dateFormat: "H:i",
        minuteIncrement: 15, // Optional: set to adjust the minute increments
        allowInput: false,
        defaultHour: 12,
        defaultMinute: 30,
        // No action on open
        onOpen: function(selectedDates, dateStr, instance) {
            // Intentionally empty - Do nothing
            if (instance.isOpen) {
                console.log(instance);
            }
        },

        // No action on change
        onChange: function(selectedDates, dateStr, instance) {
            // Intentionally empty - Do nothing
            return;
        },

        onClose: function(selectedDates, dateStr, instance) {
            // Ensure the picker is genuinely closed
            console.log(instance.isOpen);
            if (instance.isOpen) return;

                // Picker is truly closed; proceed with validation
                clearTimeout(validationTimeout);
                validationTimeout = setTimeout(function() {

                // Check if the selected time is within any of the allowed ranges
                const timeSelected = dateStr;
                const validTime = checkTimeValidity(timeSelected, allowedRange);

                if (!validTime) {
                    timePicker.value = "";
                    submitNextBtn.disabled = true;
                    displayWrongTimeAlert(allowedRange, instance);
                } else {
                    // enable the next button again
                    submitNextBtn.disabled = false;
                }
            }, 1000);                
        },
    });

    function sendHolidayRequest(selectedDate) {
        try {
            const stringifiedDate = JSON.stringify(selectedDate);
            if (!stringifiedDate) {
                throw new Exception("Date could not be stringified!");
                return;
            }
            const requestData = {
                date: stringifiedDate
            };
            return new Promise(function(resolve,reject) {
                $.ajax({
                    type: "POST",
                    url: "/holidayRequest",
                    dataType: "json",
                    encode: true,
                    success: function(response) {
                        resolve(response);
                    },
                    error: function(error) {
                        console.log(error);
                        reject(error);
                    }
                })
            });
        } catch (error) {
            console.error(error);
        }

    }

    function timeInRange(time, start, end) {
        const timeObj = new Date(`1970-01-01T${time}:00`);
        const startObj = new Date(`1970-01-01T${start}:00`);
        const endObj = new Date(`1970-01-01T${end}:00`);
        return timeObj >= startObj && timeObj <= endObj;
    }

    function getCorrectlyFormattedDateFromString(dateStr) {
        const [day, month, year] = dateStr.split('.').map(Number);
        const convertedDate = new Date(year, month - 1, day);
        const formattedDate = `${year}-${String(month).padStart(2, '0')}-${String(day).padStart(2, '0')}`;

        return {
            convertedDate: convertedDate,
            formattedDate: formattedDate
        }
    }

    function checkTimeValidity(timeStr, allowedRange) {
        let isValidTime = false;

        for (const range of allowedRange) {
                if (timeInRange(timeStr, range.start, range.end)) {
                    isValidTime = true;
                } 
            }

        return isValidTime;
    }

    function displayWrongTimeAlert(allowedRange, instance) {
        if (instance) {
            instance.clear();
        }
        if (JSON.stringify(allowedRange) === JSON.stringify([morningRange])) {
            alert('Bitte w채hlen Sie einen Zeitraum zwischen 12:30 - 14:15 Uhr.');

        } else if (dayOfWeek === 0 || dayOfWeek === 6 || JSON.stringify(allowedRange) === JSON.stringify([eveningWeekendHolidayRange])) {
            alert('Bitte w채hlen Sie einen Zeitraum zwischen 17:30 - 21:45 Uhr.');

        } else if(JSON.stringify(allowedRange) === JSON.stringify([eveningRange])) {
            alert('Bitte w채hlen Sie einen Zeitraum zwischen 17:30 - 21:15 Uhr.')

        } else {
            alert('Bitte w채hlen Sie einen Zeitraum zwischen 12:30 - 14:15 Uhr oder einen Zeitraum zwischen 17:30 - 21:15 Uhr.');
        }
    }

    async function checkDateForHoliday(date) {
        try {
            const resp = await sendHolidayRequest(date);
            if (!resp.isHoliday) {
                return false;
            }

            const isHoliday = resp.isHoliday;
            return isHoliday;
        }  catch (error) {
                console.error('Error during holiday request:', error);
        }
    }


    async function setAllowedRange(dateInput) {
        const {convertedDate, formattedDate} = getCorrectlyFormattedDateFromString(dateInput);
        const dayOfSelectedDate = convertedDate.getDay();
        const dateOfDay = String(convertedDate.getDate()).padStart(2, '0');
        const monthNumber = String(convertedDate.getMonth() + 1).padStart(2, '0');
        const yearNumber = convertedDate.getFullYear();
        const selectedDayIsHoliday = await checkDateForHoliday(formattedDate);

        const specialDaysClosedMorning = specialClosedDays['closedAtMorning'];
        const specialDaysClosedEvening = specialClosedDays['closedAtEvening'];

        let selectedDayRange = [];

        // Selected date is a day where the shop is closed at mornings for specific reasons.
        if (specialDaysClosedMorning.includes(dateInput)) {
            // check if day is weekend or holiday
            if (dayOfSelectedDate === 0 || dayOfSelectedDate === 6 || selectedDayIsHoliday) {
                selectedDayRange.push(eveningWeekendHolidayRange);
            } else {
                selectedDayRange.push(eveningRange);
            }

        // Selected date is a day where the shop is closed at evenings for specific reasons.
        } else if (specialDaysClosedEvening.includes(dateInput)) {
                // check if day is weekend or holiday
                if (dayOfSelectedDate === 0 || dayOfSelectedDate === 6 || selectedDayIsHoliday) {
                    // Day is weekend or holiday. Close for the day.
                    specialClosedDays['fullyClosed'].push(dateInput);
                } else {
                    selectedDayRange.push(morningRange);
                }

        // Normal date. Shop is open to usual times. 
        } else {
            if (dayOfSelectedDate === 0 || dayOfSelectedDate === 6 || selectedDayIsHoliday) {
                selectedDayRange.push(eveningWeekendHolidayRange);
            } else {
                selectedDayRange.push(morningRange, eveningRange);
            }
        }

        allowedRange = selectedDayRange;
        return {
            range: allowedRange,
            weekday: dayOfSelectedDate
        };
    }
});
</script>

<?php $this->endblock(); ?>