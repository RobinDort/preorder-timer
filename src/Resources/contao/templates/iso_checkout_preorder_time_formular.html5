<?php

use RobinDort\PreorderTimer\Widget\Frontend\Helper\HolidayCalculation;

$holidayCalculator = new HolidayCalculation();
$isHoliday = $holidayCalculator->isHolidayToday();
?>

<?php $this->extend('form_row'); ?>

<?php $this->block('label'); ?>
<?= $this->generateLabel() ?>
<?php $this->endblock(); ?>

<?php $this->block('field'); ?>
<?php if ($this->hasErrors()): ?>
<p id="preorder-error" class="error"><?= $this->getErrorAsString(); ?></p>
<?php endif; ?>


<div id="preorder-container">
<input 
type="text" 
name="date-input" 
id="preorder-formular-date" 
class="text <?php if ($this->class): ?> <?= $this->class ?><?php endif; ?>"
value="<?= htmlspecialchars($this->value['date'] ?? '') ?>"
>

<input
type="text"
name="time-input"
id="preorder-formular-time"
class="text"
value="<?= htmlspecialchars($this->value['time'] ?? '') ?>"
>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
const dateInput = document.getElementById("preorder-formular-date");
const timePicker = document.getElementById("preorder-formular-time");
let isHoliday = false;
const date = new Date();
let dayOfWeek = "";
let allowedRange;

flatpickr(dateInput, {
    dateFormat: "d.m.Y",
    locale: "de",
    minDate: "today",
    maxDate: new Date().fp_incr(42),
    onClose: async function(selectedDates, dateStr, instance) {
        const [day, month, year] = dateStr.split('.').map(Number);
        const convertedDate = new Date(year, month - 1, day);
        const formattedDate = `${year}-${String(month).padStart(2, '0')}-${String(day).padStart(2, '0')}`;
        const dayOfWeek = convertedDate.getDay();

        try {
            const resp = await sendHolidayRequest(formattedDate);
            const isHoliday = resp.isHoliday;

            if (dayOfWeek === 0 || dayOfWeek === 6 || isHoliday) {
                allowedRange = [{ start: "17:30", end: "21:30" }];
            } else {
                allowedRange = [{ start: "12:30", end: "14:00" }, { start: "17:30", end: "21:00" }];
            }
            

        } catch (error) {
            console.error('Error during holiday request:', error);
        }
    },
    disable: [
        function(date) {
            // Disable all Mondays
            return date.getDay() === 1;
        },
        function(date) {
            // Disable 25th December and 26th December for any year
            const day = date.getDate();
            const month = date.getMonth() + 1; // getMonth() is zero-based
            return (day === 25 && month === 12) || (day === 26 && month === 12);
        }
    ]
});

flatpickr(timePicker, {
    enableTime: true,
    noCalendar: true,
    locale: "de",
    dateFormat: "H:i",
    minuteIncrement: 15, // Optional: set to adjust the minute increments
    allowInput: false,
    defaultHour: 12,
    defaultMinute: 30,
    onClose: function(selectedDates, dateStr, instance) {

        const allowedRanges = allowedRange;

        // Check if the selected time is within any of the allowed ranges
        const timeSelected = dateStr;
        let isValid = false;

        for (const range of allowedRanges) {
            if (timeInRange(timeSelected, range.start, range.end)) {
                isValid = true;
                break;
            }
        }

        if (!isValid) {
            // Clear the input if not valid
            instance.clear();
            if (dayOfWeek === 0 || dayOfWeek === 6 || allowedRange.length === 1) {
                alert('Bitte wählen Sie einen Zeitraum zwischen 17:30 - 21:30 Uhr.');
            } else {
                alert('Bitte wählen Sie einen Zeitraum zwischen 12:30 - 14:00 Uhr oder einen Zeitraum zwischen 17:30 - 21:00 Uhr.');
            }
        }
    }
});

function sendHolidayRequest(selectedDate) {
    const requestData = {
        date: JSON.stringify(selectedDate) 
    };
    return new Promise(function(resolve,reject) {
        $.ajax({
            type: "POST",
            url: "/holidayRequest",
            dataType: "json",
            encode: true,
            data: requestData,
            success: function(response) {
                resolve(response);
            },
            error: function(error) {
                console.log(error);
                reject(error);
            }
        })
   });

}

function timeInRange(time, start, end) {
const timeObj = new Date(`1970-01-01T${time}:00`);
const startObj = new Date(`1970-01-01T${start}:00`);
const endObj = new Date(`1970-01-01T${end}:00`);
return timeObj >= startObj && timeObj <= endObj;
}
});
</script>

<?php $this->endblock(); ?>