    
<?= \Contao\Message::generate(); ?>

<?php
$statusLabels = [
    'fullyClosed' => 'Ganztägig',
    'closedAtMorning' => 'Morgens geschlossen',
    'closedAtEvening' => 'Abends/Nachmittags geschlossen'
];
?>

<?php $this->block('main'); ?>
    <h1 class="settings_headline">Shop Konfiguration Vorbestellungen</h1>

    <div class="shop-time-configuration">
        <div class="tl_formbody_edit">
            <div class="content">
                <h2>Normale Geschäftszeiten</h2>


                <!-- Date Input -->
                <div class="settings_widget">
                    <p>Hier das gewünschte Datum auswählen, an dem der Shop von seinen <strong>normalen</strong> Geschäftszeiten abweicht. Das Formular "Vorbestellungen",
                    welches im Kassenmodul vorhanden ist, wird dieses Datum berücksichtigen und die verfügbaren Zeiten dementsprechend anpassen.</p>

                    <label class="settings_label" for="preorder_date_shop_closed"><strong>1</strong>Shop geschlossen am:</label>
                    <input type="text" name="preorder_date_shop_closed" id="preorder_date_shop_closed" class="tl_text" value="">
                </div>
                
                <!-- Select Input for Status -->
                <div class="settings_widget">
                    <p>Geben Sie an, ob der Shop am gewählten Datum ganztägig oder halbtags geschlossen ist.</p>
                    <label class="settings_label" for="preorder_status"><strong>2</strong>Geschlossene Shopzeit:</label>
                    <select name="preorder_status" id="preorder_status" class="tl_select">
                        <option value="1">Ganztägig geschlossen</option>
                        <option value="2">Morgens geschlossen</option>
                        <option value="3">Nachmittags/Abends geschlossen</option>
                    </select>
                </div>
                
                <div class="tl_submit_container">
                    <button name="submit" class="tl_submit" onClick="submitClosedDays()">Speichern</button>
                </div>
            </div>
        </div>
        
        <div class="content">
            <table id="days-closed-table">
                <thead>
                    <tr>
                        <th>Shop geschlossen</th>
                        <th>Status</th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    <?php foreach ($this->normalShopClosingDays as $status => $dates): ?>
                        <?php foreach ($dates as $date): ?>
                            <tr>
                                <td><?php echo htmlspecialchars($date); ?></td>
                                <td><?php echo htmlspecialchars($statusLabels[$status]); ?></td>
                                <td>
                                    <button class="delete-btn" onClick="removeClosedDayEntry(this)" data-date="<?php echo $date?>" data-status="<?php echo $status?>">
                                        <img src="system/themes/flexible/icons/delete.svg"/>
                                    </button>
                                </td>
                            </tr>
                        <?php endforeach; ?>
                    <?php endforeach; ?>
                </tbody>
            </table>
        </div>
    </div>


    <div class="shop-time-configuration">
        <div class="tl_formbody_edit">
            <div class="content">
                <h2>Spezielle Geschäftszeiten</h2>

                <div class="settings_widget">
                    <p>Hier das gewünschte Datum auswählen, an dem der Shop zu <strong>speziellen</strong> Geschäftszeiten <strong>geöffnet</strong> ist. Das Formular "Vorbestellungen",
                        welches im Kassenmodul vorhanden ist, wird dieses Datum berücksichtigen und die verfügbaren Zeiten dementsprechend anpassen.
                    </p>
                    <label class="settings_label" for="preorder_special_shop_date"><strong>1</strong>Spezielle Öffnungszeit am:</label>
                    <input type="text" name="preorder_special_shop_date" id="preorder_special_shop_date" class="tl_text" value="">
                    <p class="error invalid-date" style="display:none;">Bitte wählen sie ein verfügbares Datum.</p>
                </div>

                <div class="settings_widget">
                    <p>Geben Sie hier die Zeitspanne an, zu der der Shop an diesem tag geöffnet ist. Bsp.: 13:00 - 15:30, 18:00-22:00</p>
                    <span class="settings_label"><strong>2</strong></span>
                    <table id="special-days-closed-table">
                            <thead>
                                <tr>
                                    <th>Von</th>
                                    <th>Bis</th>
                                </tr>
                            </thead>

                            <tbody>
                                <tr>
                                    <td>
                                        <input type="text" class="tl_text table-input"/>
                                    </td>
                                    <td>
                                        <input type="text" class="tl_text table-input"/>
                                    </td>
                                </tr>
                            </tbody>
                    </table>
                    <p class="error invalid-cell" style="display:none;">Bitte geben Sie eine gültige Uhrzeit in folgendem format an: 12:00 / 08:00</p>
                    <button name="add" class="tl_submit" onClick="addNewTableRow()">Neue Reihe hinzufügen</button>
                </div>

                <div class="tl_submit_container">
                    <button name="submit" class="tl_submit" onClick="submitSpecialClosedDays()">Speichern</button>
                </div>
            </div>

            
        </div>
    </div>
<?php $this->endblock(); ?>

<script>
    const dateInputClosedDays = document.getElementById("preorder_date_shop_closed");
    const dateInputSpecialClosedDays = document.getElementById("preorder_special_shop_date");

    flatpickr(dateInputClosedDays, {
        dateFormat: "d.m.Y",
        locale: "de",
        minDate: "today",
    });

    flatpickr(dateInputSpecialClosedDays, {
        dateFormat: "d.m.Y",
        locale: "de",
        minDate: "today",
    })


    function removeClosedDayEntry(entry) {
        const entryDate = entry.getAttribute('data-date');
        const entryStatus = entry.getAttribute('data-status');

        const dataObj = {
            entryDate,
            entryStatus
        };

        if (confirm(`Möchten Sie den Eintrag wirklich löschen?`)) {
            try {
                return new Request.JSON({
                    url: "/removeClosedDayEntry",
                    method: 'post',
                    data: dataObj,
                    onSuccess: function(response) {
                        window.location.reload();
                    },
                    onFailure: function(error) {
                        console.error(error);
                    }
                }).send();

            } catch (error) {
                console.error(error);
            }
        }
    }

    function submitClosedDays() {
        const date = document.getElementById("preorder_date_shop_closed").value;
        const status = document.getElementById("preorder_status").value;
       
        if (!date || !status) return;

        const dataObj = {
            date,
            status
        }

        try {
            return new Request.JSON({
                url: "/addClosedDayEntry",
                method: "post",
                data: dataObj,
                onSuccess: function(response) {
                    console.log(response.message);
                    if (response.status === "success") {
                        window.location.href = window.location.href
                    }
                },
                onFailure: function(error) {
                    console.error(error);
                }
            }).send();
        } catch (error) {
            console.error(error);
        }
    }

    function submitSpecialClosedDays() {
        const validation = validateSpecialClosedDays();
        if (!validation.success) return;

        const dataObj = {
            times: validation.times
        };

        try {
            return new Request.JSON({
                url: "/addSpecialClosedDayEntry",
                method: "post",
                data: dataObj,
                onSuccess: function(response) {
                    console.log(response.message);
                    if (response.status === "success") {
                        window.location.href = window.location.href
                    }
                },
                onFailure: function(error) {
                    console.error(error);
                }
            }).send();
        } catch (error) {
            console.error(error);
        }
    }


    function validateSpecialClosedDays() {
        const specialDate = document.getElementById("preorder_special_shop_date").value;
        const specialDateTable = document.getElementById("special-days-closed-table");

        const response = {
            times: [],
            success: false,
        };

        if (!specialDate) {
            const errorInfoDate = document.querySelector(".invalid-date");
            errorInfoDate.style.display = "block";
            return response;
        }

        if (!specialDateTable) return response;

        const selectedSpecialOpeningTimes = [];
        const tableRows = specialDateTable.querySelectorAll("tr");


        tableRows.forEach(row => {
            const cells = row.querySelectorAll("td");
            if (cells.length === 2) {
                const leftCellValue = cells[0].querySelector("input").value;
                const rightCellValue = cells[1].querySelector("input").value;

                if (!leftCellValue || !rightCellValue) return response;

                const validTimePattern = new RegExp('^(0[0-9]|1[0-9]|2[0-3]):([0-5][0-9])$');
                const leftValueValidPattern = validTimePattern.test(leftCellValue);
                const rightValueValidPattern = validTimePattern.test(rightCellValue);

                if (!leftValueValidPattern || !rightValueValidPattern) {
                    const errorInfo = document.querySelector(".invalid-cell");
                    errorInfo.style.display = "block";
                    return response;
                }
                const combinedValues = {start: `${leftCellValue}`, end: `${rightCellValue}`};
                selectedSpecialOpeningTimes.push(combinedValues);
            }
        })

          // Check that each array contains times later then the previous one except the first one
          const validTimes = selectedTimesAreValid(selectedSpecialOpeningTimes);
           if (!validTimes) {
                const errorInfo = document.querySelector(".invalid-cell");
                errorInfo.innerText = "Bitte geben Sie gültige Zeitspannen an und beachten Sie, dass die Startzeit geringer als die Endzeit sein muss. Ebenfalls muss die Startzeit des nächsten Eintrages höher sein, als die Endzeit des zuvorigen.";
                errorInfo.style.display = "block";
                return response;
           } else {
                response.success = true;
                response.times = selectedSpecialOpeningTimes;
           }

        return response;
    }

    function selectedTimesAreValid(openingTimes) {
        for (let i = 0; i < openingTimes.length; i++) {
            const startAsTime = timeToMinutes(openingTimes[i].start)
            const endAsTime = timeToMinutes(openingTimes[i].end);
            
            if (startAsTime >= endAsTime) {
                return false
            }
            if (openingTimes.length > 1 && i !== openingTimes.length -1) {
                const startTimeOfNextSlot = timeToMinutes(openingTimes[i+1].start);
                if (endAsTime > startTimeOfNextSlot) {
                    return false;
                }
            }
        }

        return true;
    }

    function timeToMinutes(time) {
        const [hours, minutes] = time.split(":").map(Number);
        return hours * 60 + minutes;
    }


    function addNewTableRow() {
        const tableBody = document.querySelector("#special-days-closed-table tbody")
        if (!tableBody) return;

        const newRow = document.createElement("tr");
        const newCellOne = document.createElement("td");
        const newCellTwo = document.createElement("td");
        const newCellOneInput = document.createElement("input");
        const newCellTwoInput = document.createElement("input");

        newCellOneInput.type = "text";
        newCellOneInput.classList.add("tl_text", "table-input");
        newCellTwoInput.type = "text";
        newCellTwoInput.classList.add("tl_text", "table-input");

        newCellOne.appendChild(newCellOneInput);
        newCellTwo.appendChild(newCellTwoInput);
        newRow.appendChild(newCellOne);
        newRow.appendChild(newCellTwo);
        tableBody.appendChild(newRow);
    }
</script>

